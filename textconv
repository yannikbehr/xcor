#!/usr/bin/perl

use Getopt::Std;

if ( $#ARGV == -1 ) {
print <<EOF;
textconv  v1.1  Ralph Wahrlich 25 October 2005

Converts line endings in any text files to a given format, overwriting the
original file with the new contents. File permissions and ownership are
preserved.

Usage:

  [ -v ] { -m | -u | -d } <file> [ file [ ... ] ]

  To specify line endings, use one of three command-line flags:

    -m    Output Macintosh line endings  <CR>
    -d    Output DOS line endings        <CR><LF>
    -u    Output UNIX line endings       <LF>

   (if multiple flags are specified, the last one on the command line
    take precendence)

  Optional:
    -v   Show name of each file as it is processed, along with the number of
         line endings changed. Information is printed to stderr.

EOF
exit(0);
}

$line_ending = "";
$verbose = "";
getopts('mduv');
$line_ending = "\015"       if $opt_m;
$line_ending = "\015\012"   if $opt_d;
$line_ending = "\012"       if $opt_u;
$verbose = "y"              if $opt_v;


if ( $line_ending eq "" ) {
        die "Line ending type not specified. Use one of -m, -d, -u\n";
}

$/ = \"512";

for $file ( @ARGV ) {

        $num = 0;

        open IN, "<$file" || die "Cannot open file $file : $!\n";
        open OUT, ">$file.textconv.temp" || die "Error opening temp file for writing : $!\n";

        print STDERR "$file " if $verbose;

        while ( <IN> ) {
                while ( /\015$/ && ! eof(IN) ) {
                ## This means we might have a line crossing where our read finished.
                ## We need to keep reading until the final character is NOT an end of line
                ## or until the end of file is encountered. Hopefully there are not a huge
                ## number of line endings, otherwise we'd run out of memory.
                        $_ .= <IN>;
                }
                $num += s/\015\012|\012|\015/$line_ending/sg;

###             seek (IN, 0, 0) || die "Error rewinding file : $!\n";

                print OUT $_ || die "Error writing to temp file : $!\n";

        }

        close IN;

        open IN, ">$file" || die "Cannot open original file $file for rewriting: $!\n";
        open OUT, "<$file.textconv.temp" || die "Error opening temp file for reading : $!\n";
        while ( <OUT> ) {
                print IN;
        }
        close IN;
        close OUT;
        print STDERR "$num" if $verbose;

        print STDERR "\n" if $verbose;
#       rename "$file.textconv.temp", "$file" || die "Error overwriting old file : $!\n";
#       unlink "$file" || die "Error removing old file : $!\n";
        unlink "$file.textconv.temp" || die "Error removing old file : $!\n";

}
 

